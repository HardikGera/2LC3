# 2LC3
Finals

Week 12
Theorem “Idempotency of `G`”: (G G φ)  ≡≡  (G φ)
Proof:
  Using “LTL ≡≡”:
    For any `α`, `t`:
        ⟦ (G φ) ⟧ α t
      ≡⟨ “Semantics of `G`” ⟩
        ∀ t′ : ℕ ❙ t ≤ t′ • ⟦ φ ⟧ α t′
      ≡⟨ ?, “Trading for ∀”⟩
        ∀ t′′ : ℕ • t ≤ t′′ ⇒ ⟦ φ ⟧ α t′
      ≡⟨ “Highvalue”⟩ 
        ∀ t′′ : ℕ • (∃ t′ : ℕ • t ≤ t′ ≤ t′′) ⇒ ⟦ φ ⟧ α t′′
      ≡⟨ “Witness” ⟩ 
        ∀ t′′ : ℕ • ∀ t′ : ℕ • t ≤ t′ ≤ t′′ ⇒ ⟦ φ ⟧ α t′′
      ≡⟨ “Trading for ∀” ⟩ 
        ∀ t′′ : ℕ • ∀ t′ : ℕ ❙ t ≤ t′ • t′ ≤ t′′ ⇒ ⟦ φ ⟧ α t′′
      ≡⟨ “Interchange of dummies for ∀” ⟩
        ∀ t′ : ℕ ❙ t ≤ t′ • ∀ t′′ : ℕ • t′ ≤ t′′ ⇒ ⟦ φ ⟧ α t′′
      ≡⟨“Trading for ∀” ⟩ 
        ∀ t′ : ℕ ❙ t ≤ t′ • ∀ t′′ : ℕ ❙ t′ ≤ t′′ • ⟦ φ ⟧ α t′′
      ≡⟨ “Semantics of `G`”⟩ 
        ∀ t′ : ℕ ❙ t ≤ t′ • ⟦ G φ ⟧ α t′
      ≡⟨ “Semantics of `G`” ⟩
        ⟦ (G G φ) ⟧ α t


Theorem “B via U”: (φ B ψ)  ≡≡  (¬′ ((¬′ φ) U ψ))
Proof:
  Using “LTL ≡≡”:
    For any `α`, `t`:
        ⟦ (φ B ψ) ⟧ α t
      ≡⟨ “Semantics of `B`”⟩
        ∀ t′ : ℕ ❙ t ≤ t′
              • ⟦ ψ ⟧ α t′
              ⇒ ∃ t″ : ℕ ❙ t ≤ t″ < t′ • ⟦ φ ⟧ α t″
      ≡⟨ “Trading for ∀” ⟩
        ∀ t′ : ℕ ❙ t ≤ t′
              ∧ ⟦ ψ ⟧ α t′
              • ∃ t″ : ℕ ❙ t ≤ t″ < t′ • ⟦ φ ⟧ α t″
      ≡⟨ “Generalised De Morgan” ⟩
        ¬ ∃ t′ : ℕ ❙ t ≤ t′
              ∧ ⟦ ψ ⟧ α t′
              • ∀ t″ : ℕ ❙ t ≤ t″ < t′ • ¬ ⟦ φ ⟧ α t″
      ≡⟨ “Trading for ∃”, “Semantics of LTL ¬”⟩
        ¬ ∃ t′ : ℕ ❙ t ≤ t′
              • ⟦ ψ ⟧ α t′
              ∧ ∀ t″ : ℕ ❙ t ≤ t″ < t′ • ⟦ ¬′ φ ⟧ α t″
      ≡⟨ “Semantics of `U`” ⟩
        ¬ ⟦ (¬′ φ) U ψ ⟧ α t
      ≡⟨ “Semantics of LTL ¬”⟩
        ⟦ (¬′ ((¬′ φ) U ψ)) ⟧ α t



Theorem “Negation of X”: (¬′ X φ)  ≡≡  (X ¬′ φ)
Proof:
  Using “LTL ≡≡”:
    For any `α`, `t`:
        ⟦ (¬′ X φ) ⟧ α t
      ≡⟨“Semantics of LTL ¬”⟩
        ¬ ⟦ X φ ⟧ α t
      ≡⟨“Semantics of `X`”⟩
        ¬ (⟦ φ ⟧ α) (suc t)
      ≡⟨“Semantics of LTL ¬”⟩
        ( ⟦ ¬′  φ ⟧ α) (suc t)
      ≡⟨“Semantics of `X`”⟩
        ⟦ (X ¬′ φ) ⟧ α t



Theorem “V via B”: (φ V ψ)  ≡≡  (φ B ¬′ ψ)
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ (φ V ψ) ⟧ α t
      ≡⟨“Semantics of V”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ ∧ ¬ ⟦ ψ ⟧ α t′ • ∃ t″ ❙ t ≤ t″ < t′ • ⟦ φ ⟧ α t″)
      ≡⟨“Trading for ∀”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ • ¬ (⟦ ψ ⟧ α) t′ ⇒ (∃ t″ : ℕ ❙ t ≤ t″ < t′ • (⟦ φ ⟧ α) t″ ) )   
      ≡⟨“Semantics of LTL ¬”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ (¬′ ψ) ⟧ α) t′ ⇒ (∃ t″ : ℕ ❙ t ≤ t″ < t′ • (⟦ φ ⟧ α) t″ ) )   
      ≡⟨“Semantics of B”⟩
        ⟦ (φ B ¬′ ψ) ⟧ α t


╍╍╍ Axiom “Semantics of B”: (⟦ (φ B ψ) ⟧ α) t ≡ (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ ψ ⟧ α) t′ ⇒ (∃ t″ : ℕ ❙ t ≤ t″ < t′ • (⟦ φ ⟧ α) t″ ) )   
╍╍╍ Axiom “Semantics of LTL ¬”: (⟦ (¬′ φ) ⟧ α) t ≡ ¬ (⟦ φ ⟧ α) t


Lemma “Semantics of Y”:
    ⟦ Y φ ⟧ α t ≡ t ≠ 0 ∧ ⟦ φ ⟧ α (pred t)
Proof:
  By induction on t : ℕ:
    Base case:
        ⟦ Y φ ⟧ α 0 
      ≡⟨“Semantics of Y”⟩
        false
      ≡⟨“Irreflexivity of ≠”, “Zero of ∧”⟩
        0 ≠ 0 ∧ ⟦ φ ⟧ α (pred 0)
    Induction step:
        ⟦ Y φ ⟧ α (suc t)
      ≡⟨“Semantics of Y”⟩
        ⟦ φ ⟧ α t
      ≡⟨“Identity of ∧”⟩
        true ∧ ⟦ φ ⟧ α t
      ≡⟨“Zero is not successor”⟩
        (suc t) ≠ 0 ∧ ⟦ φ ⟧ α t
      ≡⟨“Predecessor of successor”⟩
        suc t ≠ 0 ∧ ⟦ φ ⟧ α (pred (suc t))


Lemma “Semantics of Z”:
    ⟦ Z φ ⟧ α t  ≡  t = 0 ∨ ⟦ φ ⟧ α (pred t)
Proof:
  By induction on t : ℕ:
    Base case:
        ⟦ Z φ ⟧ α 0 
      ≡⟨“Semantics of Z”⟩ 
        true
      ≡⟨“Zero of ∨”, “Reflexivity of =”⟩
        0 = 0 ∨ ⟦ φ ⟧ α (pred 0)
    Induction step:
        ⟦ Z φ ⟧ α (suc t)
      ≡⟨“Semantics of Z”⟩
        ⟦ φ ⟧ α t
      ≡⟨“Identity of ∨”⟩
        false ∨ ⟦ φ ⟧ α t
      ≡⟨“Zero is not successor”⟩
        (suc t) = 0 ∨ ⟦ φ ⟧ α t
      ≡⟨“Predecessor of successor”⟩
        (suc t) = 0 ∨ ⟦ φ ⟧ α (pred (suc t))


Theorem “Reflexivity of LTL ≡≡”: φ ≡≡ φ
Proof:
    φ ≡≡ φ 
  ≡⟨“LTL ≡≡”⟩
    (∀ α : A → ℕ → 𝔹 • ∀ t : ℕ • ⟦ φ ⟧ α t ≡ ⟦ φ ⟧ α t)
  ≡⟨“Reflexivity of ≡”⟩ 
    (∀ α : A → ℕ → 𝔹 • ∀ t : ℕ • true)
  ≡⟨“True ∀ body”⟩
    true


Theorem “Symmetry of LTL ≡≡”: φ ≡≡ ψ  ≡  ψ ≡≡ φ
Proof:
    φ ≡≡ ψ
  ≡⟨“LTL ≡≡”⟩
    ∀ α : A → ℕ → 𝔹 • ∀ t : ℕ • ⟦ φ ⟧ α t ≡ ⟦ ψ ⟧ α t
  ≡⟨“Symmetry of ≡”⟩
    ∀ α : A → ℕ → 𝔹 • ∀ t : ℕ • ⟦ ψ ⟧ α t ≡ ⟦ φ ⟧ α t 
  ≡⟨“LTL ≡≡”⟩
    ψ ≡≡ φ


Theorem “Transitivity of LTL ≡≡”: φ ≡≡ χ ≡≡ ψ  ⇒  φ ≡≡ ψ
Proof:
  Assuming φ ≡≡ χ ∧ χ ≡≡ ψ and using with “LTL ≡≡”: 
    Using “LTL ≡≡”:
      For any α, t:
          ⟦ φ ⟧ α t
        ≡⟨ Assumption φ ≡≡ χ ∧ χ ≡≡ ψ⟩
          ⟦ χ ⟧ α t
        ≡⟨ Assumption φ ≡≡ χ ∧ χ ≡≡ ψ⟩
          ⟦ ψ ⟧ α t

Lemma “Symmetry of LTL ∧”:  (φ ∧′ ψ) ≡≡ (ψ ∧′ φ)
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ φ ∧′ ψ ⟧ α t ≡ ⟦ ψ ∧′ φ ⟧ α t
      ≡⟨“Semantics of LTL ∧”, “Symmetry of ∧”, “Reflexivity of ≡”⟩
        true


Lemma “Symmetry of LTL ∨”:  (φ ∨′ ψ) ≡≡ (ψ ∨′ φ)
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ φ ∨′ ψ ⟧ α t ≡ ⟦ ψ ∨′ φ ⟧ α t
      ≡⟨“Semantics of LTL ∨”, “Symmetry of ∨”, “Reflexivity of ≡”⟩
        true


Lemma “Symmetry of LTL ⇔”:  (φ ⇔′ ψ) ≡≡ (ψ ⇔′ φ)
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ φ ⇔′ ψ ⟧ α t ≡ ⟦ ψ ⇔′ φ ⟧ α t
      ≡⟨“Semantics of LTL ⇔”, “Reflexivity of ≡”⟩
        true

Lemma “Associativity of LTL ∧”:
  ((φ ∧′ ψ) ∧′ χ) ≡≡ (φ ∧′ (ψ ∧′ χ))
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ ((φ ∧′ ψ) ∧′ χ) ⟧ α t
      ≡⟨“Semantics of LTL ∧”⟩
        ⟦ (φ ∧′ ψ) ⟧ α t ∧ ⟦ χ ⟧ α t
      ≡⟨“Semantics of LTL ∧”⟩
        ⟦ φ ⟧ α t ∧ ⟦ ψ ⟧ α t ∧ ⟦ χ ⟧ α t
      ≡⟨ “Symmetry of ∧”⟩
        ⟦ φ ⟧ α t ∧ ( ⟦ ψ ⟧ α t ∧ ⟦ χ ⟧ α t )
      ≡⟨ “Semantics of LTL ∧”⟩
        ⟦ φ ⟧ α t ∧ ⟦ (ψ ∧′ χ) ⟧ α t
      ≡⟨ “Semantics of LTL ∧”⟩
        ⟦ (φ ∧′ (ψ ∧′ χ)) ⟧ α t


Lemma “Absorption of LTL ∨ by ∧”:
  (φ ∧′ (φ ∨′ ψ)) ≡≡ φ
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ (φ ∧′ (φ ∨′ ψ)) ⟧ α t
      ≡⟨“Semantics of LTL ∧”⟩
        ⟦ φ ⟧ α t ∧ ⟦ (φ ∨′ ψ) ⟧ α t
      ≡⟨“Semantics of LTL ∨”⟩
        ⟦ φ ⟧ α t ∧ (⟦ φ ⟧ α t ∨ ⟦ ψ ⟧ α t)
      ≡⟨“Absorption”⟩
        ⟦ φ ⟧ α t


Theorem “Negation of X”: (¬′ X φ)  ≡≡  (X ¬′ φ)
Proof:  
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ (¬′ X φ) ⟧ α t
      ≡⟨“Semantics of LTL ¬”⟩
        ¬ ⟦ X φ ⟧ α t
      ≡⟨“Semantics of X”⟩
        ¬ (⟦ φ ⟧ α) (suc t)
      ≡⟨“Semantics of LTL ¬”⟩
        ( ⟦ ¬′  φ ⟧ α) (suc t)
      ≡⟨“Semantics of X”⟩
        ⟦ (X ¬′ φ) ⟧ α t
        

╍╍╍ Axiom “Semantics of X”: (⟦ (X φ) ⟧ α) t ≡ (⟦ φ ⟧ α) (suc t)
╍╍╍ Axiom “Semantics of LTL ¬”: ⟦ ¬′ φ ⟧ α t ≡ ¬ ⟦ φ ⟧ α t


Theorem “G via F”: (G φ)  ≡≡  (¬′ F ¬′ φ)
Proof:
  Using “LTL ≡≡”: 
    For any α, t:
        ⟦ (G φ) ⟧ α t
      ≡⟨“Semantics of G”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      ≡⟨“Generalised De Morgan”⟩
        ¬ (∃ t′ : ℕ ❙ t ≤ t′ • ¬ (⟦ φ ⟧ α) t′ )
      ≡⟨“Semantics of LTL ¬”⟩  
        ¬ (∃ t′ : ℕ ❙ t ≤ t′ • (⟦ ¬′ φ ⟧ α) t′ )
      ≡⟨“Semantics of F”⟩
        ¬ ⟦ (F ¬′ φ) ⟧ α t
      ≡⟨“Semantics of LTL ¬”⟩
        ⟦ (¬′ F ¬′ φ) ⟧ α t


Theorem “V via B”: (φ V ψ)  ≡≡  (φ B ¬′ ψ)
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ (φ V ψ) ⟧ α t
      ≡⟨“Semantics of V”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ ∧ ¬ ⟦ ψ ⟧ α t′ • ∃ t″ ❙ t ≤ t″ < t′ • ⟦ φ ⟧ α t″)
      ≡⟨“Trading for ∀”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ • ¬ (⟦ ψ ⟧ α) t′ ⇒ (∃ t″ : ℕ ❙ t ≤ t″ < t′ • (⟦ φ ⟧ α) t″ ) )   
      ≡⟨“Semantics of LTL ¬”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ (¬′ ψ) ⟧ α) t′ ⇒ (∃ t″ : ℕ ❙ t ≤ t″ < t′ • (⟦ φ ⟧ α) t″ ) )   
      ≡⟨“Semantics of B”⟩
        ⟦ (φ B ¬′ ψ) ⟧ α t

Theorem “G via V”: (G φ)  ≡≡  (FALSE V φ)
Proof:
  Using “LTL ≡≡”:
    For any α, t:
        ⟦ (G φ) ⟧ α t
      =⟨“Semantics of G”⟩
        (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      =⟨“Identity of ∨”⟩
        false ∨ (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      =⟨ “Double negation”, “Negation of false”⟩
        ¬ ( true )
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      =⟨“True ∀ body”⟩ 
        ¬ (∀ t″ : ℕ ❙ t ≤ t″ • ( true ) )
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      =⟨“Zero of ∨”⟩
        ¬ (∀ t″ : ℕ ❙ t ≤ t″ • ( true ∨ ¬(∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) )
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      =⟨“Negation of false”⟩
        ¬ (∀ t″ : ℕ ❙ t ≤ t″ • (¬ false ∨ ¬(∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) )
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      =⟨“De Morgan”⟩
        ¬ (∀ t″ : ℕ ❙ t ≤ t″ • ¬ (false ∧ (∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) )
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • (⟦ φ ⟧ α) t′ )
      =⟨“Identity of ∧”⟩
        ¬ (∀ t″ : ℕ ❙ t ≤ t″ • ¬ (false ∧ (∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) )
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • true ∧ (⟦ φ ⟧ α) t′ )
      =⟨“Generalised De Morgan”⟩
        ¬ (∀ t″ : ℕ ❙ t ≤ t″ • ¬ (false ∧ (∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) )
        ∨ ¬ (∃ t′ : ℕ ❙ t ≤ t′ • ¬ (true ∧ (⟦ φ ⟧ α) t′) )
      =⟨“Generalised De Morgan”⟩
        (∃ t″ : ℕ ❙ t ≤ t″ • false ∧ 
        (∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) 
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • true
        ∧ (⟦ φ ⟧ α) t′ )
      =⟨“Negation of false”⟩
        (∃ t″ : ℕ ❙ t ≤ t″ • false ∧ 
        (∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) 
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • ¬ false
        ∧ (⟦ φ ⟧ α) t′ )
      =⟨“Semantics of FALSE”⟩
        (∃ t″ : ℕ ❙ t ≤ t″ • (⟦ FALSE ⟧ α) t″ ∧ 
        (∀ t′ : ℕ ❙ t ≤ t′ ≤ t″ • (⟦ φ ⟧ α) t′ ) ) 
        ∨ (∀ t′ : ℕ ❙ t ≤ t′ • ¬ (⟦ FALSE ⟧ α) t′ 
        ∧ (⟦ φ ⟧ α) t′ )   
      =⟨“Semantics of V”⟩
        ⟦ FALSE V φ ⟧ α t


While loop

Theorem “Adding₁”:
      n = n₀
    ⇒⁅  i := 0 ⍮
        while i ≠ m
          do
            i := i + 1 ⍮
            n := n + 1
          od
      ⁆
      n = m + n₀
Proof:
    n = n₀
  ≡⟨“Identity of +”⟩
    n = n₀ + 0
  ⇒⁅ i := 0 ⁆ ⟨“Assignment” with Substitution⟩
    n = i + n₀ 
  


  ⇒⁅ 
        while i ≠ m
          do
            i := i + 1 ⍮
            n := n + 1
          od
      ⁆
   ⟨ “While” with subproof:
         ( i ≠ m ) ∧ (n = i + n₀ )
       ⇒⟨“Weakening”⟩
         n = i + n₀  
       ≡⟨“Cancellation of +”⟩
         n + 1 = i + n₀ + 1
       ⇒⁅ i := i + 1 ⁆ ⟨“Assignment” with Substitution⟩ 
         n + 1 = i + n₀ 
       ⇒⁅ n := n + 1 ⁆ ⟨“Assignment” with Substitution⟩
         n = i + n₀
    ⟩

    ¬ ( i ≠ m) ∧ (n = n₀ + i )
  ≡⟨“Definition of ≠”⟩
    ¬ ¬ ( i = m) ∧ (n = n₀ + i )
  ≡⟨“Double negation”⟩
    (i = m) ∧ (n = n₀ + i )
  ≡⟨ Substitution ⟩
    (i = m) ∧ (n = n₀ + z ) [z ≔ i]
  ≡⟨ “Replacement” ⟩ 
    (i = m) ∧ (n = n₀ + z ) [z ≔ m]
  ≡⟨ Substitution ⟩
    (i = m) ∧ (n = n₀ + m )
  ⇒⟨ “Weakening”⟩
    n = m + n₀


Theorem “Adding₂”:
      m = m₀ ∧ n = n₀
    ⇒⁅  while m ≠ 0
          do
            m := m - 1 ⍮
            n := n + 1
          od
      ⁆
      n = m₀ + n₀
Proof:
    m = m₀ ∧ n = n₀
  =⟨ “Cancellation of +” ⟩
    m + n = m₀ + n ∧ n = n₀
  =⟨ Substitution  ⟩
    (m + n = m₀ + z) [z ≔ n]  ∧ n = n₀ 
  =⟨ “Replacement” ⟩
    (m + n = m₀ + z) [z ≔ n₀]  ∧ n = n₀  
  =⟨ Substitution ⟩  
    (m + n = m₀ + n₀) ∧   n = n₀  
  ⇒⟨ “Weakening” ⟩ 
    m + n = m₀ + n₀ 
  ⇒⁅  while m ≠ 0
          do
            m := m - 1 ⍮
            n := n + 1
          od
      ⁆
   ⟨“While” with subproof:
        m ≠ 0 ∧ (m + n = m₀ + n₀)
      ⇒⟨ “Weakening”⟩ 
        m + n = m₀ + n₀
      =⟨“Identity of +”⟩
        m + n + 0 = m₀ + n₀  
      =⟨ Fact `1 - 1 = 0` ⟩
        m + n + ( 1 - 1 ) = m₀ + n₀ 
      =⟨ “Subtraction” ⟩  
        m + n + 1 + ( - 1 ) = m₀ + n₀
      =⟨ “Symmetry of +”⟩
        m + (- 1) + n + 1 = m₀ + n₀
      =⟨ “Subtraction”⟩
        m - 1 + n + 1 = m₀ + n₀
      ⇒⁅ m := m - 1 ⁆⟨ “Assignment” with Substitution⟩ 
        m + n + 1 = m₀ + n₀
      ⇒⁅ n := n + 1 ⁆⟨ “Assignment” with Substitution⟩ 
        m + n = m₀ + n₀
    ⟩


    ¬ ( m ≠ 0) ∧ (m + n = m₀ + n₀)
  ≡⟨“Definition of ≠”⟩
    ¬ ¬( m = 0) ∧ (m + n = m₀ + n₀)
  ≡⟨“Double negation”⟩ 
    ( m = 0) ∧ (m + n = m₀ + n₀)
  ≡⟨ Substitution⟩
    ( m = 0) ∧ (i + n = m₀ + n₀)[ i ≔ m]
  ≡⟨ “Replacement”⟩
    ( m = 0) ∧ (i + n = m₀ + n₀)[ i ≔ 0]
  ≡⟨ Substitution⟩
    ( m = 0) ∧ (0 + n = m₀ + n₀)
  ≡⟨“Identity of +”⟩
    ( m = 0) ∧ (n = m₀ + n₀)
  ⇒⟨“Weakening”⟩
    n = m₀ + n₀



11.2

Theorem “Membership in ‥”:  i ∈ m ‥ n  ≡  m ≤ i ≤ n
Proof:
    i ∈ m ‥ n
  =⟨ “Definition of ‥” ⟩
    i ∈ { i ❙ m ≤ i ≤ n }
  =⟨ “Simple membership” ⟩ 
    m ≤ i ≤ n

Theorem “Membership in 0 ‥”:  i ∈ 0 ‥ n  ≡  i ≤ n
Proof:
    i ∈ 0 ‥ n
  =⟨ “Definition of ‥” ⟩
    i ∈ { i ❙ 0 ≤ i ≤ n }
  =⟨ “Simple membership” ⟩
    0 ≤ i ≤ n
  =⟨ “Reflexivity of ≡” ⟩
    0 ≤ i ∧ i ≤ n
  =⟨ “Zero is least element”⟩
    true ∧ i ≤ n
  =⟨ “Identity of ∧”⟩
    i ≤ n

Theorem “Sorting 0′”:
    xs₀ = xs ∈ (0 ‥ k) ⇴ ⌞ ℕ ⌟
  ⇒⁅ while true do
        xs := xs ⊕ { ⟨ 0, 42 ⟩ }
      od
    ⁆
    xs ∈ (0 ‥ k) ⇴ ⌞ ℕ ⌟  ∧  sorted xs
      ∧ (∃ f ❙ f ∈ (0 ‥ k) ⤖ (0 ‥ k) • xs = f ⨾ xs₀)
Proof:
    xs₀ = xs ∈ (0 ‥ k) ⇴ ⌞ ℕ ⌟
  ⇒⟨ “Right-zero of ⇒” ⟩
    true                        ╍╍╍ Invariant
  ⇒⁅ while true do
        xs := xs ⊕ { ⟨ 0, 42 ⟩ }
      od
    ⁆ ⟨ “While” with subproof:
            true ∧ true
          =⟨ “Identity of ∧” ⟩
            true
          ⇒⁅ xs := xs ⊕ { ⟨ 0, 42 ⟩ } ⁆ ⟨ “Assignment” with substitution ⟩
            true
    ⟩
    ¬ true ∧ true
  =⟨ “Definition of `false`” ⟩
    false ∧ true
  =⟨ “Identity of ∧” ⟩
    false
  ⇒⟨ “ex falso quodlibet” ⟩
    xs ∈ (0 ‥ k) ⇴ ⌞ ℕ ⌟  ∧  sorted xs
      ∧ (∃ f ❙ f ∈ (0 ‥ k) ⤖ (0 ‥ k) • xs = f ⨾ xs₀)


Theorem “Array swap”:
       i ≤ k ≥ j  ∧  xs = xs₀ ∈ (0 ‥ k) ⇴ ⌞ ℕ ⌟
    ⇒⁅ z := xs @ i ⍮
       xs := xs ⊕ { ⟨ i, xs @ j ⟩ } ⍮
       xs := xs ⊕ { ⟨ j, z ⟩ }
     ⁆
      xs = xs₀ ⊕ { ⟨ i , xs₀ @ j ⟩, ⟨ j , xs₀ @ i ⟩ }
Proof:
      xs = xs₀ ⊕ { ⟨ i , xs₀ @ j ⟩, ⟨ j , xs₀ @ i ⟩ }
  ⁅ xs := xs ⊕ { ⟨ j, z ⟩ } ⁆⇐ ⟨ “Assignment” with substitution ⟩
      xs ⊕ { ⟨ j, z ⟩ } = xs₀ ⊕ { ⟨ i , xs₀ @ j ⟩, ⟨ j , xs₀ @ i ⟩ }
  ⁅ xs := xs ⊕ { ⟨ i, xs @ j ⟩ } ⁆⇐ ⟨ “Assignment” with substitution ⟩
      (xs  ⊕ { ⟨ i, xs @ j ⟩ }) ⊕ { ⟨ j, z ⟩ } = xs₀ ⊕ { ⟨ i , xs₀ @ j ⟩, ⟨ j , xs₀ @ i ⟩ }
  ⁅ z := xs @ i ⁆⇐ ⟨ “Assignment” with substitution ⟩
      (xs  ⊕ { ⟨ i, xs @ j ⟩ }) ⊕ { ⟨ j, xs @ i ⟩ } = xs₀ ⊕ { ⟨ i , xs₀ @ j ⟩, ⟨ j , xs₀ @ i ⟩ }
  ⇐⟨ Subproof:
      Assuming (1) `i ≤ k ≥ j  ∧  xs = xs₀ ∈ (0 ‥ k) ⇴ ⌞ ℕ ⌟`:
        By cases: `i = j`, `¬ (i = j)`
          Completeness: By “LEM”
          Case `i = j`:
              (xs  ⊕ { ⟨ i, xs @ j ⟩ }) ⊕ { ⟨ j, xs @ i ⟩ }
            =⟨ Assumption `i = j` ⟩
              (xs  ⊕ { ⟨ i, xs @ i ⟩ }) ⊕ { ⟨ i, xs @ i ⟩ }
            =⟨ “Repeated ⊕”, assumption (1) ⟩
              xs₀ ⊕ { ⟨ i , xs₀ @ i ⟩ }
            =⟨ “Idempotency of ∨” ⟩
              xs₀ ⊕ { ⟨ i , xs₀ @ i ⟩, ⟨ i , xs₀ @ i ⟩ }
            =⟨ Assumption `i = j` ⟩
              xs₀ ⊕ { ⟨ i , xs₀ @ j ⟩, ⟨ j , xs₀ @ i ⟩ }
          Case `¬ (i = j)`:
              (xs  ⊕ { ⟨ i, xs @ j ⟩ }) ⊕ { ⟨ j, xs @ i ⟩ }
            =⟨ “Associativity of ⊕” ⟩
              xs  ⊕ ({ ⟨ i, xs @ j ⟩ } ⊕ { ⟨ j, xs @ i ⟩ })
            =⟨ “Singletons ⊕” with assumption `¬ (i = j)`, assumption (1) ⟩
              xs₀ ⊕ { ⟨ i , xs₀ @ j ⟩, ⟨ j , xs₀ @ i ⟩ }
    ⟩
    i ≤ k ≥ j  ∧  xs = xs₀ ∈ (0 ‥ k) ⇴ ⌞ ℕ ⌟


11.1

Theorem (KA.36) “Idempotency of *”:  R * * = R *
Proof:
    R *
  ⊆⟨ “* increases” ⟩ 
    R * *
  =⟨ “Identity of ⨾” ⟩
    R * * ⨾ 𝕀
  ⊆⟨ Monotonicity with “Reflexivity of *” ⟩
    R * * ⨾ R *
  ⊆⟨ Subproof for `R * * ⨾ R * ⊆ R *`: 
       Using “Left-induction for *”:
         Subproof for `R * ⨾ R * ⊆ R *`:
           By “Transitivity of *” 
    ⟩
    R *

Theorem (KA.34) “Left-induction with ∪ for *”:
    R ⨾ S ∪ T ⊆ S  ⇒  R * ⨾ T ⊆ S
Proof:
  Assuming (1) `R ⨾ S ∪ T ⊆ S`
    and using with “Characterisation of ∪”:
      R * ⨾ T
    ⊆⟨ Monotonicity with Assumption (1)⟩
      R * ⨾ S
    ⊆⟨ Subproof for `R * ⨾ S ⊆ S`:
         Using “Left-induction for *”:
           Subproof for `R ⨾ S ⊆ S`:
             By Assumption (1) 
      ⟩ 
      S

Theorem (KA.32) “Refl-trans closure minimality”:
    R ⊆ S  ∧  reflexive S  ∧  transitive S  ⇒  R * ⊆ S
Proof:
  Assuming `R ⊆ S`,
           (1) `reflexive S` and using with “Definition of reflexivity”,
           (2) `transitive S` and using with “Definition of transitivity”:
      R *  
    ⊆⟨ Monotonicity with Assumption `R ⊆ S` ⟩
      S *
    =⟨ “Refl-trans *” with Assumption (1) and Assumption (2)⟩
      S

Theorem (KA.31) “Refl-trans *”:
  reflexive R  ∧  transitive R  ⇒  R * = R
Proof:
  Assuming (1) `reflexive R` and using with “Definition of reflexivity”,
           (2) `transitive R` and using with “Definition of transitivity”:
      R
    ⊆⟨ “* increases” ⟩
      R *
    =⟨ “Identity of ⨾” ⟩
      R * ⨾ 𝕀
    ⊆⟨ Monotonicity with Assumption (1) ⟩
      R * ⨾ R 
    ⊆⟨ Subproof for `R * ⨾ R ⊆ R`: 
         Using “Left-induction for *”:
           Subproof for `R ⨾ R ⊆ R`:
             By Assumption (2)
      ⟩
      R  

Theorem (KA.30) “Subidentity *”: R ⊆ 𝕀  ⇒  R * = 𝕀
Proof:
  Assuming `R ⊆ 𝕀`:
    Using “Mutual inclusion”:
      Subproof for `𝕀 ⊆ R *`:
          𝕀
        ⊆⟨ “Reflexivity of *”⟩
          R *
      Subproof for `R * ⊆ 𝕀`:
          R * ⊆ 𝕀
        =⟨ “Identity of ⨾” ⟩
          R * ⨾ 𝕀 ⊆ 𝕀
        ⇐⟨ “Left-induction for *” ⟩
          R ⨾ 𝕀 ⊆ 𝕀
        =⟨ “Identity of ⨾” ⟩
          R ⊆ 𝕀

Theorem (KA.28) “Reflexive closure *”: (𝕀 ∪ R) * = R *
Proof:
    R *
  ⊆⟨ Monotonicity with “Weakening for ∪”⟩
    (R ∪ 𝕀) *
  =⟨ “Union *” ⟩
    (R * ⨾ 𝕀) * ⨾ R *
  =⟨ “Identity of ⨾” ⟩
    R * * ⨾ R *
  ⊆⟨ Monotonicity with “Subproof1”⟩
    R * ⨾ R *
  =⟨ “⨾-idempotency of *”⟩
    R *

Lemma “Subproof1”: R * * ⊆ R *
Proof:
    R * *
  =⟨ “Identity of ⨾” ⟩
    R * * ⨾ 𝕀
  ⊆⟨ Monotonicity with “Reflexivity of *” ⟩
    R * * ⨾ R *
  ⊆⟨ Subproof for `R * * ⨾ R * ⊆ R *`: 
       Using “Left-induction for *”:
         Subproof for `R * ⨾ R * ⊆ R *`:
           By “Transitivity of *” 
    ⟩
    R *

Theorem (KA.27) “Composition *”:  (R ⨾ S) * = 𝕀 ∪ R ⨾ (S ⨾ R) * ⨾ S
Proof:
    (R ⨾ S) *
  =⟨ “Left-iteration for *” ⟩
    𝕀 ∪ R ⨾ S ⨾ (R ⨾ S) *
  =⟨ “Composition * shifting” ⟩
    𝕀 ∪ R ⨾ (S ⨾ R) * ⨾ S

Theorem (KA.26) “Composition * shifting”: (R ⨾ S) * ⨾ R = R ⨾ (S ⨾ R) *
Proof:
    (R ⨾ S) * ⨾ R
  =⟨ “Identity of ⨾” ⟩
    (R ⨾ S) * ⨾ R ⨾ 𝕀
  ⊆⟨ Monotonicity with “Reflexivity of *” ⟩
    (R ⨾ S) * ⨾ R ⨾ (S ⨾ R) *
  ⊆⟨Subproof for `(R ⨾ S) * ⨾ R ⨾ (S ⨾ R) * ⊆ R ⨾ (S ⨾ R) *`: 
      Using “Left-induction for *”:
        Subproof for `(R ⨾ S) ⨾ R ⨾ (S ⨾ R) * ⊆ R ⨾ (S ⨾ R) *`:
              (R ⨾ S) ⨾ R ⨾ (S ⨾ R) *
            ⊆⟨ Monotonicity with “Left-iteration ⊆ in *” ⟩ 
              R ⨾ (S ⨾ R) *


    ⟩

    R ⨾ (S ⨾ R) * 
  =⟨ “Identity of ⨾” ⟩
    𝕀 ⨾ R ⨾ (S ⨾ R) * 
  ⊆⟨ Monotonicity with “Reflexivity of *” ⟩
    (R ⨾ S) * ⨾ R ⨾ (S ⨾ R) *
  ⊆⟨ Subproof for `(R ⨾ S) * ⨾ R ⨾ (S ⨾ R) * ⊆ (R ⨾ S) * ⨾ R`:
       Using “Right-induction for *”:
         Subproof for `(R ⨾ S) * ⨾ R ⨾ (S ⨾ R) ⊆ (R ⨾ S) * ⨾ R`:
                 (R ⨾ S) * ⨾ R ⨾ S ⨾ R
              ⊆⟨ Monotonicity with “Right-iteration ⊆ in *”⟩
                 (R ⨾ S) * ⨾ R
    ⟩
    (R ⨾ S) * ⨾ R

Theorem (KA.22) “Subidentity decomposition entering * from left”:
    G ⨾ F ⊆ 𝕀
  ⇒ (F ⨾ R ⨾ G) * ⨾ F ⊆ F ⨾ R *
Proof:
  Assuming `G ⨾ F ⊆ 𝕀`:
      (F ⨾ R ⨾ G) * ⨾ F
    =⟨“Identity of ⨾”⟩
      (F ⨾ R ⨾ G) * ⨾ F ⨾ 𝕀
    ⊆⟨ Monotonicity with “Reflexivity of *” ⟩
      (F ⨾ R ⨾ G) * ⨾ F ⨾ R *
    ⊆⟨ Subproof for `(F ⨾ R ⨾ G) * ⨾ F ⨾ R * ⊆ F ⨾ R *`:
        Using “Left-induction for *”:
          Subproof for `F ⨾ R ⨾ G ⨾ F ⨾ R * ⊆ F ⨾ R *`:
              F ⨾ R ⨾ G ⨾ F ⨾ R *
            ⊆⟨Monotonicity with Assumption `G ⨾ F ⊆ 𝕀`⟩ 
              F ⨾ R ⨾ 𝕀 ⨾ R *
            =⟨ “Identity of ⨾”⟩ 
              F ⨾ R ⨾ R *
            ⊆⟨ Monotonicity with “Left-iteration ⊆ in *”⟩ 
              F ⨾ R *
      ⟩
      F ⨾ R *

  Assuming `R ⊆ S`:
      R *
    =⟨ “Identity of ⨾”⟩
      R * ⨾ 𝕀
    ⊆⟨ Monotonicity with “Reflexivity of *”⟩
      R * ⨾ S *
    ⊆⟨ Subproof for `R * ⨾ S * ⊆ S *`:
         Using “Left-induction for *”:
           Subproof for `R ⨾ S * ⊆ S *`:
               R ⨾ S *
             ⊆⟨ Monotonicity with Assumption `R ⊆ S` ⟩
               S ⨾ S *
             ⊆⟨ “Left-iteration ⊆ in *” ⟩
               S *  
      ⟩  
      S *

Theorem (KA.14) “Shuffle *”:  R ⨾ R * = R * ⨾ R
Proof:
    R ⨾ R *
  =⟨ “Identity of ⨾” ⟩
    𝕀 ⨾ R ⨾ R * 
  ⊆⟨ Monotonicity with “Reflexivity of *” ⟩
    R * ⨾ R ⨾ R *
  ⊆⟨ “Right-induction for *” with 
        Subproof for `R * ⨾ R ⨾ R ⊆ R * ⨾ R`:
            R * ⨾ R ⨾ R
          ⊆⟨ Monotonicity with “Right-iteration ⊆ in *” ⟩
            R * ⨾ R 
    ⟩ 
    R * ⨾ R
  =⟨ “Identity of ⨾” ⟩
    R * ⨾ R ⨾ 𝕀
  ⊆⟨ Monotonicity with “Reflexivity of *” ⟩
    R * ⨾ R ⨾ R *
  ⊆⟨ “Left-induction for *” with 
        Subproof for `R ⨾ R ⨾ R * ⊆ R ⨾ R *`:
            R ⨾ R ⨾ R *
          ⊆⟨ Monotonicity with “Left-iteration ⊆ in *” ⟩
            R ⨾ R * 
    ⟩ 
    R ⨾ R *

11.3

Lemma “ExprV evaluation after substitution”:
  ∀ e • evalV s (substV v f e) = evalV (s ⊕′ ⟨v, evalV s f⟩) e
Proof:
  Using “Induction over `ExprV`”:
    Subproof for `∀ u • evalV s (substV v f (Var′ u)) = evalV (s ⊕′ ⟨v, evalV s f⟩) (Var′ u)`:
      For any `u`:
        By cases: `u = v` , `u ≠ v`
          Completeness: By “Excluded middle” and “Definition of ≠”
          Case `u ≠ v`:
              evalV s (substV v f (Var′ u)) 
            =⟨ “Definition of `substV`” with Assumption `u ≠ v` ⟩
              evalV s ( Var′ u )
            =⟨ “Definition of `evalV`” ⟩
              s u 
            =⟨ “Definition of function override” with Assumption `u ≠ v` ⟩  
              (s ⊕′ ⟨v, evalV s f⟩) (u)
            =⟨ “Definition of `evalV`” ⟩  
              evalV (s ⊕′ ⟨v, evalV s f⟩) (Var′ u)

 ╍╍╍ “Definition of `substV`”: v ≠ w ⇒ substV v e (Var′ w) = Var′ w
 ╍╍╍ “Definition of function override”:  (x ≠ z ⇒ (f ⊕′ ⟨ x, y ⟩) z = f z)
╍╍╍ “Definition of `evalV`”:  evalV s (Var′ v) = s v


          Case `u = v`:
              evalV s (substV v f (Var′ u)) 
            =⟨ Assumption `u = v` ⟩
              evalV s (substV v f (Var′ v))
            =⟨ “Definition of `substV`” ⟩   
              evalV s f
            =⟨ “Definition of function override” with Assumption `u = v` ⟩  
              (s ⊕′ ⟨v, evalV s f⟩) (v)  
            =⟨ “Definition of `evalV`” ⟩  
              evalV (s ⊕′ ⟨v, evalV s f⟩) (Var′ v)  
            =⟨ Assumption `u = v` ⟩
              evalV (s ⊕′ ⟨v, evalV s f⟩) (Var′ u)  

╍╍╍ “Definition of `evalV`”:  evalV s (Var′ v) = s v
╍╍╍ “Definition of `substV`”: substV v e (Var′ v) = e
╍╍╍ “Definition of function override”:  (x = z ⇒ (f ⊕′ ⟨ x, y ⟩) z = y)


    Subproof for `∀ n • evalV s (substV v f (Int′ n)) = evalV (s ⊕′ ⟨v, evalV s f⟩) (Int′ n)`:
      For any `n`:
            evalV s (substV v f (Int′ n))
          =⟨ “Definition of `substV`” ⟩
            evalV s (Int′ n)
          =⟨ “Definition of `evalV`” ⟩ 
            n
          =⟨ “Definition of `evalV`” ⟩
            evalV (s ⊕′ ⟨v, evalV s f⟩) (Int′ n)



    Subproof:  ╍╍╍  `(∀ e₁, e₂ ❙ P[e ≔ e₁] ∧ P[e ≔ e₂] • P[e ≔ e₁ +′ e₂])`:
        For any `e1 , e2` satisfying (1)
          `evalV s (substV v f e₁) = evalV (s ⊕′ ⟨v, evalV s f⟩) e₁   ∧
           evalV s (substV v f e₂) = evalV (s ⊕′ ⟨v, evalV s f⟩) e₂`:

            evalV s (substV v f (e₁ +′ e₂)) 
          =⟨ “Definition of `substV`” ⟩
            evalV s (substV v f (e₁) +′ substV v f (e₂)) 
          =⟨ “Definition of `evalV`” ⟩ 
            evalV s (substV v f (e₁))  + evalV s (substV v f (e₂))
          =⟨ Assumption (1) ⟩ 
            (evalV (s ⊕′ ⟨v, evalV s f⟩) e₁)  +  (evalV (s ⊕′ ⟨v, evalV s f⟩) e₂)
          =⟨ “Definition of `evalV`” ⟩ 
            evalV (s ⊕′ ⟨v, evalV s f⟩) (e₁ +′ e₂)
              
        
    Subproof:
        For any `e1 , e2` satisfying (1)
          `evalV s (substV v f e₁) = evalV (s ⊕′ ⟨v, evalV s f⟩) e₁   ∧
           evalV s (substV v f e₂) = evalV (s ⊕′ ⟨v, evalV s f⟩) e₂`:

            evalV s (substV v f (e₁ ·′ e₂)) 
          =⟨ “Definition of `substV`” ⟩
            evalV s (substV v f (e₁) ·′ substV v f (e₂)) 
          =⟨ “Definition of `evalV`” ⟩ 
            evalV s (substV v f (e₁))  · evalV s (substV v f (e₂))
          =⟨ Assumption (1) ⟩ 
            (evalV (s ⊕′ ⟨v, evalV s f⟩) e₁)  ·  (evalV (s ⊕′ ⟨v, evalV s f⟩) e₂)
          =⟨ “Definition of `evalV`” ⟩ 
            evalV (s ⊕′ ⟨v, evalV s f⟩) (e₁ ·′ e₂)

Lemma “Complement of simplee set comprehension”:
  ~ { x ❙ P } = { x ❙ ¬ P }
Proof:
  Using “Set extensionality”:
    For any `e`:
        e ∈ ~ { x ❙ P }
      =⟨ “Set complement” ⟩
        ¬ (e ∈ { x ❙ P })
      =⟨ “Simple membership”⟩
        ¬ P[x ≔ e]
      =⟨ Substitution ⟩
        (¬ P)[x ≔ e]
      =⟨ “Simple membership”⟩
        e ∈ { x ❙ ¬ P }

Lemma “Negation on `Expr𝔹`”:     sat (¬′ b)      =  ~ (sat b)
Proof:
    sat (¬′ b)
  =⟨ “Definition of `sat`” ⟩
    { s ❙ eval𝔹 s (¬′ b) }
  =⟨ “Definition of `eval𝔹`” ⟩
    { s ❙ ¬ (eval𝔹 s b) } 
  =⟨ “Complement of simplee set comprehension” ⟩
    ~ { s ❙ (eval𝔹 s b) }
  =⟨ “Definition of `sat`”⟩
    ~ (sat b)

Lemma “Conjunction on `Expr𝔹`”:  sat (b₁ ∧′ b₂)  =  sat b₁ ∩ sat b₂
Proof:
  Using “Set extensionality”:
      s ∈ sat (b₁ ∧′ b₂)
    ≡⟨“Definition of `sat`” ⟩
      s ∈ { s ❙ eval𝔹 s (b₁ ∧′ b₂) }
    ≡⟨ “Simple membership”⟩
      eval𝔹 s (b₁ ∧′ b₂)
    ≡⟨ “Definition of `eval𝔹`” ⟩
      eval𝔹 s b₁ ∧ eval𝔹 s b₂
    ≡⟨ “Simple membership” ⟩
      s ∈ { s ❙ eval𝔹 s b₁ } ∧ s ∈ { s ❙ eval𝔹 s b₂ }
    ≡⟨ “Definition of `sat`”⟩
      s ∈ sat b₁ ∧ s ∈ sat b₂
    ≡⟨ “Set intersection”⟩
      s ∈ sat b₁ ∩ sat b₂


Lemma “Expr𝔹 evaluation after substitution”:
  ∀ b • eval𝔹 s (subst𝔹 v f b) = eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b
Proof:
  Using “Induction over `Expr𝔹`”:
    Subproof:
        eval𝔹 s (subst𝔹 v f false′)
      ≡⟨ “Definition of `subst𝔹`”  ⟩
        eval𝔹 s false′
      ≡⟨“Definition of `eval𝔹`”⟩
        false
      ≡⟨ “Definition of `eval𝔹`”⟩
        eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) false′
    Subproof:
        eval𝔹 s (subst𝔹 v f true′)
      =⟨ “Definition of `subst𝔹`” ⟩
        eval𝔹 s true′
      =⟨ “Definition of `eval𝔹`”⟩
        true
      =⟨ “Definition of `eval𝔹`”⟩
        eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) true′
    Subproof:
      For any `e₁, e₂`:
          eval𝔹 s (subst𝔹 v f (e₁ =′ e₂))
        =⟨ “Definition of `subst𝔹`” ⟩
          eval𝔹 s (substV v f e₁ =′ substV v f e₂)
        =⟨ “Definition of `eval𝔹`”⟩
          evalV s (substV v f e₁) = evalV s (substV v f e₂)
        =⟨ “ExprV evaluation after substitution”⟩
          evalV (s ⊕′ ⟨v, evalV s f⟩) e₁ =
          evalV (s ⊕′ ⟨v, evalV s f⟩) e₂
        =⟨“Definition of `eval𝔹`”⟩  
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) (e₁ =′ e₂)
    Subproof:
      For any `b` satisfying “IndHyp”
            `eval𝔹 s (subst𝔹 v f b) = eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b`:
          eval𝔹 s (subst𝔹 v f (¬′ b))
        =⟨“Definition of `subst𝔹`”⟩
          eval𝔹 s (¬′ (subst𝔹 v f b))
        =⟨ “Definition of `eval𝔹`”⟩
          ¬ (eval𝔹 s (subst𝔹 v f b))
        =⟨ Assumption “IndHyp”⟩
          ¬ (eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b)
        =⟨ “Definition of `eval𝔹`”⟩
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) (¬′ b)             

    Subproof:
      For any `b₁, b₂` satisfying “IndHyp”
             `eval𝔹 s (subst𝔹 v f b₁) = eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₁ ∧ 
              eval𝔹 s (subst𝔹 v f b₂) = eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₂`:
          eval𝔹 s (subst𝔹 v f (b₁ ∧′ b₂))
        =⟨ “Definition of `subst𝔹`”⟩
          eval𝔹 s (subst𝔹 v f b₁ ∧′ subst𝔹 v f b₂)
        =⟨ “Definition of `eval𝔹`”⟩
          eval𝔹 s (subst𝔹 v f b₁) ∧ 
          eval𝔹 s (subst𝔹 v f b₂)
        =⟨ Assumption “IndHyp”⟩
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₁ ∧
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₂
        =⟨ “Definition of `eval𝔹`”⟩
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) (b₁ ∧′ b₂)
    Subproof:
      For any `b₁, b₂` satisfying “IndHyp”
             `eval𝔹 s (subst𝔹 v f b₁) = eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₁ ∧ 
              eval𝔹 s (subst𝔹 v f b₂) = eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₂`:
          eval𝔹 s (subst𝔹 v f (b₁ ∨′ b₂))
        =⟨ “Definition of `subst𝔹`”⟩
          eval𝔹 s (subst𝔹 v f b₁ ∨′ subst𝔹 v f b₂)
        =⟨ “Definition of `eval𝔹`”⟩
          eval𝔹 s (subst𝔹 v f b₁) ∨ 
          eval𝔹 s (subst𝔹 v f b₂)
        =⟨ Assumption “IndHyp”⟩
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₁ ∨
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) b₂
        =⟨ “Definition of `eval𝔹`”⟩
          eval𝔹 (s ⊕′ ⟨v, evalV s f⟩) (b₁ ∨′ b₂)

11.4

Theorem “Partial correctness via ∀”:
  (P ⇒⁅ C ⁆ Q)
  ≡ ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ⇒ s₂ ∈ sat Q
Proof:
    (P ⇒⁅ C ⁆ Q)
  ≡⟨ “Partial correctness” ⟩
    ⟦ C ⟧ ⦇ sat P ⦈ ⊆ sat Q
  ≡⟨ “Set inclusion” ⟩
    ∀ s₂ • s₂ ∈ ⟦ C ⟧ ⦇ sat P ⦈ ⇒ s₂ ∈ sat Q
  ≡⟨ “Relational image”⟩
    ∀ s₂ • (∃ s₁ ❙ s₁ ∈ sat P • s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ) ⇒ s₂ ∈ sat Q
  ≡⟨ “Material implication” ⟩
    ∀ s₂ • ¬ (∃ s₁ ❙ s₁ ∈ sat P • s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ) ∨ s₂ ∈ sat Q
  ≡⟨ “Generalised De Morgan” ⟩
    ∀ s₂ • (∀ s₁ ❙ s₁ ∈ sat P • ¬ (s₁ ⦗ ⟦ C ⟧ ⦘ s₂ )) ∨ s₂ ∈ sat Q
  ≡⟨ “Distributivity of ∨ over ∀” ⟩
    ∀ s₂ • ∀ s₁ ❙ s₁ ∈ sat P • ¬ (s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ) ∨ s₂ ∈ sat Q
  ≡⟨ “Material implication” ⟩
    ∀ s₂ • ∀ s₁ ❙ s₁ ∈ sat P • (s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ) ⇒ s₂ ∈ sat Q
  ≡⟨ “Trading for ∀”⟩
    ∀ s₂ • ∀ s₁ • s₁ ∈ sat P ∧ (s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ) ⇒ s₂ ∈ sat Q
  ≡⟨ “Nesting for ∀”, “Dummy list permutation for ∀”⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ⇒ s₂ ∈ sat Q

Lemma “Relational image under {}”:  {} ⦇ P ⦈ = {}
Proof:
  Using “Set extensionality”:
      y  ∈  {} ⦇ P ⦈
    =⟨ “Definition of ⦇_⦈” ⟩
      y ∈ (Ran (P ◁ {}))  
    ≡⟨ “Membership in `Ran`” ⟩
      (∃ x • x ⦗ (P ◁ {}) ⦘ y )  
    ≡⟨ “Relationship via ◁” ⟩
      (∃ x • x ∈ P ∧ x ⦗ {} ⦘ y  )      
    ≡⟨ “Empty relation” ⟩
      (∃ x • x ∈ P ∧ false  )      
    ≡⟨ “Zero of ∧” ⟩ 
      (∃ x • false)
    ≡⟨ “False ∃ body” ⟩       
      false
    ≡⟨ “Empty set” ⟩ 
      y ∈ {} 

Theorem “Partial correctness of `while true`”:
    P ⇒⁅ while true′ do C od ⁆ Q
Proof:
    P ⇒⁅ while true′ do C od ⁆ Q
  ≡⟨ “Partial correctness via ∀”⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦  while true′ do C od  ⟧ ⦘ s₂ ⇒ s₂ ∈ sat Q
  ≡⟨ “Semantics of `while`” ⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ (sat true′ ◁ ⟦ C ⟧) * ⩥ sat true′ ⦘ s₂ ⇒ s₂ ∈ sat Q
  ≡⟨ “sat true′” ⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ (𝐔 ◁ ⟦ C ⟧) * ⩥ 𝐔 ⦘ s₂ ⇒ s₂ ∈ sat Q
  =⟨“BC”⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ {} ⦘ s₂ ⇒ s₂ ∈ sat Q
  ≡⟨ “Empty relation”⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ false ⇒ s₂ ∈ sat Q
  ≡⟨ “ex falso quodlibet”, “Zero of ∧”⟩
    ∀ s₁, s₂ • true
  ≡⟨“Nesting for ∀”, “True ∀ body”⟩
    true

Lemma “BC”: P ⩥ 𝐔 = {}
Proof:
  Using “Relation extensionality”:
    For any `x , y`:
        x ⦗ P ⩥ 𝐔 ⦘ y
      ≡⟨ “Relationship via ⩥” ⟩ 
        x ⦗ P ⦘ y ∧  ¬ (y ∈ 𝐔)
      ≡⟨ “Universal set” ⟩
        x ⦗ P ⦘ y ∧  ¬ (true) 
      ≡⟨ “Definition of `false`” and “Zero of ∧” ⟩ 
        false
      ≡⟨ “Empty relation” ⟩ 
        x ⦗ {} ⦘ y


Theorem “`skip` rule”:  P ⇒⁅ skip ⁆ P
Proof:
    P ⇒⁅ skip ⁆ P
  ≡⟨ “Partial correctness via ∀”⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦ skip ⟧ ⦘ s₂ ⇒ s₂ ∈ sat P
  ≡⟨ “Semantics of `skip`”⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ 𝕀 ⦘ s₂ ⇒ s₂ ∈ sat P
  ≡⟨ “Identity relation” ⟩
    ∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ = s₂ ⇒ s₂ ∈ sat P
  ≡⟨ “Nesting for ∀”⟩
    ∀ s₁ • ∀ s₂ • s₁ ∈ sat P ∧ s₁ = s₂ ⇒ s₂ ∈ sat P
  ≡⟨ “Trading for ∀”, “One-point rule for ∀”, Substitution⟩
    true
  

Lemma “Relational image under 𝕀”:    𝕀 ⦇ P ⦈ = P
Proof: 
  Using “Set extensionality”:
      y ∈ 𝕀 ⦇ P ⦈
    ≡⟨ “Definition of ⦇_⦈” ⟩
      y ∈ Ran (P ◁ 𝕀)
    ≡⟨ “Membership in `Ran`” ⟩
      ∃ x • x ⦗ P ◁ 𝕀 ⦘ y 
    ≡⟨ “Relationship via ◁” ⟩ 
      ∃ x • x ∈ P ∧ x ⦗ 𝕀 ⦘ y
    ≡⟨ “Relationship via 𝕀” ⟩
      ∃ x • x ∈ P ∧ x = y
    ≡⟨ “Reflexivity of ≡” ⟩ 
      ∃ x • x = y  ∧  x ∈ P 
    ≡⟨ “Trading for ∃” ⟩
      ∃ x ❙ x = y  •  x ∈ P
    ≡⟨ “One-point rule for ∃” and Substitution ⟩    
      y ∈ P

╍╍╍ “One-point rule for ∃”: (∃ x ❙ x = E • P ) ≡ P[x ≔ E]   
╍╍╍ “Definition of ⦇_⦈” “Range of ◁”: R ⦇ A ⦈ = Ran (A ◁ R)
╍╍╍ “Membership in Ran”: y ∈ Ran R ≡ (∃ x • x ⦗ R ⦘ y ) 
╍╍╍  “Relationship via ◁”: x ⦗ A ◁ R ⦘ y ≡ x ∈ A ∧ x ⦗ R ⦘ y
╍╍╍ “∃-Introduction”: P[x ≔ E] ⇒ (∃ x • P )
╍╍╍ “Trading for ∃”: (∃ x ❙ R • P ) ≡ (∃ x • R ∧ P )

Theorem “skip rule”:  P ⇒⁅ skip ⁆ P
Proof:
    P ⇒⁅ skip ⁆ P
  ≡⟨ “Partial correctness” ⟩
    ⟦ skip ⟧ ⦇ sat P ⦈ ⊆ sat P
  ≡⟨ “Semantics of `skip`” ⟩
    𝕀 ⦇ sat P ⦈ ⊆ sat P
  ≡⟨ “Relational image under 𝕀” ⟩  
    sat P ⊆ sat P
  ≡⟨ “Reflexivity of ⊆” ⟩ 
    true

Lemma “Mono of mirror”: A ⊆ B ⇒ R ⦇ A ⦈ ⊆ R ⦇ B ⦈
Proof:
    R ⦇ A ⦈ ⊆ R ⦇ B ⦈
  =⟨“Definition of ⦇_⦈”⟩
    Ran (A ◁ R) ⊆ Ran (B ◁ R)
  ⇐⟨ “Monotonicity of `Ran`” ⟩
    (A ◁ R) ⊆ (B ◁ R)
  ⇐⟨ “Monotonicity of ◁” ⟩
    A ⊆ B

Derived inference rule “Sequence”:
    `P  ⇒⁅ C₁ ⁆  Q`,  `Q  ⇒⁅ C₂ ⁆  R`
   ⊦————————————————————————————————
      `P  ⇒⁅ C₁ ⍮ C₂ ⁆  R`
Proof:
  Assuming (C₁) `P  ⇒⁅ C₁ ⁆  Q` and using with “Partial correctness”,
           (C₂) `Q  ⇒⁅ C₂ ⁆  R` and using with “Partial correctness”:
      P  ⇒⁅ C₁ ⍮ C₂ ⁆  R
    ≡⟨ “Partial correctness” ⟩
      ⟦ C₁ ⍮ C₂ ⟧ ⦇ sat P ⦈ ⊆ sat R
    ≡⟨ “Semantics of ⍮”⟩
      (⟦ C₁ ⟧ ⨾ ⟦ C₂ ⟧) ⦇ sat P ⦈ ⊆ sat R
    ≡⟨ “Relational image under ⨾”⟩
      ⟦ C₂ ⟧ ⦇ (⟦ C₁ ⟧ ⦇ sat P ⦈) ⦈ ⊆ sat R
    ⇐⟨ “Transitivity of ⊆” with “Mono of mirror” with Assumption (C₁) ⟩
      ⟦ C₂ ⟧ ⦇ sat Q ⦈ ⊆ sat R
    ≡⟨ Assumption (C₂)⟩
      true

Lemma “Rel img of union”: (A ∪ B) ⦇ C ⦈ = (A ⦇ C ⦈) ∪ (B ⦇ C ⦈)
Proof:
    (A ∪ B) ⦇ C ⦈
  =⟨ “Definition of ⦇_⦈”⟩
    Ran (C ◁ (A ∪ B))
  =⟨“Distributivity of ◁ over relation union”⟩
    Ran ((C ◁ A) ∪ (C ◁ B))
  =⟨ “Range of union”⟩ 
    Ran (C ◁ A) ∪ Ran (C ◁ B)
  =⟨ “Definition of ⦇_⦈”⟩
    (A ⦇ C ⦈) ∪ (B ⦇ C ⦈)

Lemma “Rel img of ◁”: (A ◁ R) ⦇ B ⦈ = R ⦇ A ∩ B ⦈
Proof:
    (A ◁ R) ⦇ B ⦈
  =⟨ “Definition of ⦇_⦈”⟩
    Ran (B ◁ (A ◁ R))
  =⟨ “Nested ◁”⟩
    Ran ((B ∩ A) ◁ R )
  =⟨ “Definition of ⦇_⦈”⟩
    R ⦇ A ∩ B ⦈

Derived inference rule “Conditional”:

      `B ∧′ P ⇒⁅ C₁ ⁆ Q`,   `¬′ B ∧′ P ⇒⁅ C₂ ⁆ Q`
    ⊦————————————————————————————————————————————
        `P ⇒⁅ if B then C₁ else C₂ fi ⁆ Q`

Proof:
  Assuming (1) `B ∧′ P ⇒⁅ C₁ ⁆ Q` and using with “Partial correctness”,
           (2) `¬′ B ∧′ P ⇒⁅ C₂ ⁆ Q` and using with “Partial correctness”:
      P ⇒⁅ if B then C₁ else C₂ fi ⁆ Q
    =⟨ “Partial correctness” ⟩
      ⟦ if B then C₁ else C₂ fi ⟧ ⦇ sat P ⦈ ⊆ sat Q
    =⟨ “Semantics of `if`” ⟩ 
      ((sat B ◁ ⟦ C₁ ⟧) ∪ (sat B ⩤ ⟦ C₂ ⟧)) ⦇ sat P ⦈ ⊆ sat Q
    =⟨ “Rel img of union” ⟩
      ((sat B ◁ ⟦ C₁ ⟧) ⦇ sat P ⦈) ∪ ((sat B ⩤ ⟦ C₂ ⟧) ⦇ sat P ⦈) ⊆ sat Q
    =⟨ “Definition of ⩤ via ◁” ⟩ 
      ((sat B ◁ ⟦ C₁ ⟧) ⦇ sat P ⦈) ∪ ((~ (sat B) ◁ ⟦ C₂ ⟧) ⦇ sat P ⦈) ⊆ sat Q
    =⟨ “Rel img of ◁”⟩
      (⟦ C₁ ⟧ ⦇ sat B ∩ sat P ⦈) ∪ (⟦ C₂ ⟧ ⦇ ~ (sat B) ∩ sat P ⦈) ⊆ sat Q
    =⟨ “Characterisation of ∪”⟩ 
      (⟦ C₁ ⟧ ⦇ sat B ∩ sat P ⦈) ⊆ sat Q ∧ (⟦ C₂ ⟧ ⦇ ~ (sat B) ∩ sat P ⦈) ⊆ sat Q
    =⟨ “Conjunction on `Expr𝔹`”, “Negation on `Expr𝔹`”⟩
      ⟦ C₁ ⟧ ⦇ sat (B ∧′ P) ⦈ ⊆ sat Q ∧ (⟦ C₂ ⟧ ⦇ sat ( ¬′ B ∧′ P) ⦈) ⊆ sat Q
    =⟨ Assumptions (1) and (2), “Idempotency of ∧”⟩
      true


Derived inference rule “While”:
                 `B ∧′ Q  ⇒⁅ C ⁆  Q`
        ⊦—————————————————————————————————————
          `Q  ⇒⁅ while B do C od ⁆  ¬′ B ∧′ Q`
Proof:
  Assuming “this” `B ∧′ Q  ⇒⁅ C ⁆  Q` and using with “Partial correctness”:
    Side proof for (1)`(sat B ◁ ⟦ C ⟧) ⦇ sat Q ⦈ ⊆ sat Q`:
        (sat B ◁ ⟦ C ⟧) ⦇ sat Q ⦈
      =⟨ “Definition of ⦇_⦈”⟩
        Ran (sat Q ◁ sat B ◁ ⟦ C ⟧)
      =⟨ “Nested ◁”⟩
        Ran ((sat Q ∩ sat B) ◁ ⟦ C ⟧)
      =⟨ “Conjunction on `Expr𝔹`”⟩
        Ran ((sat (Q ∧′ B)) ◁ ⟦ C ⟧)
      =⟨ “Definition of ⦇_⦈”⟩
        ⟦ C ⟧ ⦇ sat (Q ∧′ B) ⦈
      ⊆⟨ Assumption “this” with “Partial correctness” ⟩ 
        sat Q
    Continuing:
        Q  ⇒⁅ while B do C od ⁆  ¬′ B ∧′ Q
      =⟨ “Partial correctness” ⟩
        ⟦ while B do C od ⟧ ⦇ sat Q ⦈ ⊆ sat (¬′ B ∧′ Q)
      =⟨ “Conjunction on `Expr𝔹`”, “Negation on `Expr𝔹`”⟩
        ⟦ while B do C od ⟧ ⦇ sat Q ⦈ ⊆  ~ (sat B) ∩ sat Q
      =⟨ “Semantics of `while`”⟩
        ((sat B ◁ ⟦ C ⟧) * ⩥ sat B) ⦇ sat Q ⦈ ⊆  ~ (sat B) ∩ sat Q
      =⟨ “Relational image under ⩥” ⟩
        (sat B ◁ ⟦ C ⟧) * ⦇ sat Q ⦈  ∩  ~ (sat B) ⊆ ~ (sat B) ∩  sat Q
      ⇐⟨ “Monotonicity of ∩” ⟩
        ((sat B ◁ ⟦ C ⟧) * ⦇ sat Q ⦈) ⊆  sat Q
      =⟨ “Relational image under *” with local property (1) ⟩
        true

Total Correctness


Corollary “Inclusion of `sat`”:
    b₁ ⊑ b₂  ≡  sat b₁ ⊆ sat b₂
Proof:
    b₁ ⊑ b₂
  ≡⟨ “Semantic consequence in `Expr𝔹`” ⟩
    ∀ s : Var → ℤ • eval𝔹 s b₁ ⇒ eval𝔹 s b₂   
  ≡⟨ “Simple membership” ⟩
    ∀ s • s ∈ { s ❙ (eval𝔹 s) b₁ } ⇒ s ∈ { s ❙ (eval𝔹 s) b₂ }
  ≡⟨ “Set inclusion” ⟩
    { s ❙ (eval𝔹 s) b₁ } ⊆ { s ❙ (eval𝔹 s) b₂ }
  ≡⟨ “Definition of `sat`” ⟩
    sat b₁ ⊆ sat b₂

Derived inference rule “Strengthening the precondition”:
    `P  ⊑  Q`,  `Q  ⇒⁅ C ⁆  R`
   ⊦————————————————————————————————
      `P  ⇒⁅ C ⁆  R`
Proof:
  Assuming (1) `P  ⊑  Q` and using with “Inclusion of `sat`” , 
           (2) `Q  ⇒⁅ C ⁆  R` and using with “Partial correctness” :
      P  ⇒⁅ C ⁆  R
    ≡⟨ “Partial correctness” ⟩
      ⟦ C ⟧ ⦇ sat P ⦈ ⊆ sat R
    ⇐⟨ “Transitivity of ⊆” with “Monotonicity of ⦇_⦈” with Assumption (1) ⟩ 
      ⟦ C ⟧ ⦇ sat Q ⦈ ⊆ sat R
    ≡⟨Assumption (2)⟩
      true

Theorem “Distinguishing `Expr𝔹`”:
   s₁ ≠ s₂ ⇒ ∃ b : Expr𝔹 • eval𝔹 s₁ b ≠ eval𝔹 s₂ b
Proof:
  Assuming `s₁ ≠ s₂`:
      ∃ b • eval𝔹 s₁ b ≠ eval𝔹 s₂ b
    ⇐⟨ “∃-Introduction” ⟩ 
      (eval𝔹 s₁ b ≠ eval𝔹 s₂ b) [b ≔ (Int′ v =′ Var′ w)]
    ≡⟨ Substitution ⟩ 
      (eval𝔹 s₁ (Int′ v =′ Var′ w) ≠ eval𝔹 s₂ (Int′ v =′ Var′ w))
    ≡⟨ “Definition of `eval𝔹`” ⟩
      (evalV s₁ (Int′ v) = evalV s₁ (Var′ w)) ≠ (evalV s₂ (Int′ v) = evalV s₂ (Var′ w))
    ≡⟨ “Definition of `evalV`” ⟩
      ( v = s₁ w) ≠ (v = s₂ w)
    
    ≡⟨ ? ⟩
      true

Theorem “Total correctness via ∀”:
  (P ⇒⁅⧼ C ⧽⁆ Q)
  ≡ (∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ⇒ s₂ ∈ sat Q)
  ∧ (∀ s₁ ❙ s₁ ∈ sat P • ∃ s₂ • s₁ ⦗ ⟦ C ⟧ ⦘ s₂)
Proof:
    (P ⇒⁅⧼ C ⧽⁆ Q)
  ≡⟨ “Total correctness” ⟩
    (⟦ C ⟧ ⦇ sat P ⦈ ⊆ sat Q)  ∧  sat P ⊆ Dom ⟦ C ⟧
  ≡⟨ “Partial correctness” ⟩
    (P ⇒⁅ C ⁆ Q) ∧ sat P ⊆ Dom ⟦ C ⟧
  ≡⟨ “Partial correctness via ∀” ⟩
    (∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ⇒ s₂ ∈ sat Q ) ∧ sat P ⊆ Dom ⟦ C ⟧
  ≡⟨ “Definition of ⊆” ⟩ 
    (∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ⇒ s₂ ∈ sat Q ) ∧ (∀ s₁ ❙ s₁ ∈ sat P • s₁ ∈ Dom ⟦ C ⟧ )
  ≡⟨ “Membership in `Dom`” ⟩ 
    (∀ s₁, s₂ • s₁ ∈ sat P ∧ s₁ ⦗ ⟦ C ⟧ ⦘ s₂ ⇒ s₂ ∈ sat Q) ∧ (∀ s₁ ❙ s₁ ∈ sat P • ∃ s₂ • s₁ ⦗ ⟦ C ⟧ ⦘ s₂)

Derived inference rule “Sequence tot. corr.”:
    `P  ⇒⁅⧼ C₁ ⧽⁆  Q`,  `Q  ⇒⁅⧼ C₂ ⧽⁆  R`
   ⊦——————————————————————————————————————
      `P  ⇒⁅⧼ C₁ ⍮ C₂ ⧽⁆  R`
Proof:
  Assuming (1) `P  ⇒⁅⧼ C₁ ⧽⁆  Q` and using with “Total correctness” , 
            ╍╍╍ ⟦ C₁ ⟧ ⦇ sat P ⦈ ⊆ sat Q  ∧  sat P ⊆ Dom ⟦ C₁ ⟧ 
           (2) `Q  ⇒⁅⧼ C₂ ⧽⁆  R` and using with “Total correctness” :
            ╍╍╍ ⟦ C₂ ⟧ ⦇ sat Q ⦈ ⊆ sat R  ∧  sat Q ⊆ Dom ⟦ C₂ ⟧
      P  ⇒⁅⧼ C₁ ⍮ C₂ ⧽⁆  R
    ≡⟨ “Total correctness” ⟩
      ⟦ C₁ ⍮ C₂ ⟧ ⦇ sat P ⦈ ⊆ sat R  ∧  sat P ⊆ Dom ⟦ C₁ ⍮ C₂ ⟧
    ≡⟨ “Semantics of ⍮” ⟩  
      ( ⟦ C₁ ⟧ ⨾ ⟦ C₂ ⟧ ) ⦇ sat P ⦈ ⊆ sat R ∧ sat P ⊆ Dom (⟦ C₁ ⟧ ⨾ ⟦ C₂ ⟧)
    ≡⟨ “Relational image under ⨾” ⟩
      ⟦ C₂ ⟧ ⦇ (⟦ C₁ ⟧ ⦇ sat P ⦈) ⦈   ⊆ sat R ∧ sat P ⊆ Dom (⟦ C₁ ⟧ ⨾ ⟦ C₂ ⟧)
    ⇐⟨ Antitonicity with “Monotonicity of ⦇ ⦈” with assumption (1)⟩
      ⟦ C₂ ⟧ ⦇ sat Q ⦈ ⊆ sat R ∧ sat P ⊆ Dom (⟦ C₁ ⟧ ⨾ ⟦ C₂ ⟧)
    ⇐⟨?⟩
      ⟦ C₂ ⟧ ⦇ sat Q ⦈ ⊆ sat R  ∧  sat Q ⊆ Dom ⟦ C₂ ⟧
    ≡⟨ Assumption (2) ⟩ 
      true

Derived inference rule “Conditional tot. corr.”:

      `B ∧′ P ⇒⁅⧼ C₁ ⧽⁆ Q`,   `¬′ B ∧′ P ⇒⁅⧼ C₂ ⧽⁆ Q`
    ⊦————————————————————————————————————————————
        `P ⇒⁅⧼ if B then C₁ else C₂ fi ⧽⁆ Q`

Proof:
  Assuming (1) `B ∧′ P ⇒⁅⧼ C₁ ⧽⁆ Q` and using with “Total correctness” , 
           (2) `¬′ B ∧′ P ⇒⁅⧼ C₂ ⧽⁆ Q` and using with “Total correctness” :
      P ⇒⁅⧼ if B then C₁ else C₂ fi ⧽⁆ Q
    ≡⟨ “Total correctness” ⟩
      ⟦ if B then C₁ else C₂ fi ⟧ ⦇ sat P ⦈ ⊆ sat Q  ∧  sat P ⊆ Dom ⟦ if B then C₁ else C₂ fi ⟧
    ≡⟨ “Semantics of `if`” ⟩  
      ( (sat B ◁ ⟦ C₁ ⟧) ∪ (sat B ⩤ ⟦ C₂ ⟧) ) ⦇ sat P ⦈ ⊆ sat Q  ∧  sat P ⊆ Dom ((sat B ◁ ⟦ C₁ ⟧) ∪ (sat B ⩤ ⟦ C₂ ⟧))
    ≡⟨ ? ⟩
      ⟦ C₂ ⟧ ⦇ sat (¬′ B ∧′ P) ⦈ ⊆ sat Q ∧ sat (¬′ B ∧′ P) ⊆ Dom ⟦ C₂ ⟧
    ≡⟨ “Total correctness” ⟩ 
      ¬′ B ∧′ P ⇒⁅⧼ C₂ ⧽⁆ Q
    ≡⟨ Assumption (2) ⟩  
      true

Theorem “Deterministic total correctness”:
  (∀ c : Cmd • univalent ⟦ c ⟧) ⇒
  ((P ⇒⁅⧼ C ⧽⁆ Q)   ≡   sat P ⊆ Dom (⟦ C ⟧ ▷ sat Q))
Proof:
  Assuming (A)`(∀ c : Cmd • univalent ⟦ c ⟧)`:
      sat P ⊆ Dom (⟦ C ⟧ ▷ sat Q)
    =⟨ “Bounded domain”⟩ 
      id (sat P) ⊆ (⟦ C ⟧ ▷ sat Q) ⨾ (⟦ C ⟧ ▷ sat Q) ˘
    =⟨ “Converse of ▷”⟩ 
      id (sat P) ⊆ (⟦ C ⟧ ▷ sat Q) ⨾ (sat Q ◁ ⟦ C ⟧ ˘) 
    =⟨ “Domain restriction via ⨾”, “Range restriction via ⨾”⟩ 
      id (sat P) ⊆ ⟦ C ⟧ ⨾ id (sat Q) ⨾ id(sat Q) ⨾ ⟦ C ⟧ ˘
    =⟨“Idempotency of `id`”⟩ 
      id (sat P) ⊆ ⟦ C ⟧ ⨾ id (sat Q) ⨾ ⟦ C ⟧ ˘
    =⟨“Domain- and range-bounded univalent” with Assumption (A)⟩ 
       id (sat P) ⊆ ⟦ C ⟧ ⨾ ⟦ C ⟧ ˘ ∧ id (sat P) ⨾ (⟦ C ⟧ ⨾ id (sat Q)) = id (sat P) ⨾ ⟦ C ⟧
    =⟨ “Bounded domain”⟩ 
       sat P ⊆ Dom ⟦ C ⟧ ∧ id (sat P) ⨾ ⟦ C ⟧ ⨾ id (sat Q) = id (sat P) ⨾ ⟦ C ⟧
    =⟨ “Bounded range”⟩ 
       sat P ⊆ Dom ⟦ C ⟧ ∧ Ran(id (sat P) ⨾ ⟦ C ⟧) ⊆ sat Q
    =⟨ “Range of ⨾”, “Range of `id`”, “Range of ◁”⟩ 
       sat P ⊆ Dom ⟦ C ⟧ ∧ ⟦ C ⟧ ⦇ sat P ⦈ ⊆ sat Q
    =⟨ “Total correctness” ⟩
       (P ⇒⁅⧼ C ⧽⁆ Q)


9.2

Theorem (14.230) “Relationship via ⩥” “Range antirestriction”:
    x ⦗ R ⩥ B ⦘ y  ≡  x ⦗ R ⦘ y ∧ ¬ (y ∈ B)
Proof:
    x ⦗ R ⩥ B ⦘ y
  ≡⟨ “Definition of ⩥” ⟩
    x ⦗ R ∩ (𝐔 × ~ B) ⦘ y
  ≡⟨ “Relation intersection” ⟩
    x ⦗ R ⦘ y ∧ x ⦗ 𝐔 × ~ B ⦘ y
  ≡⟨ “Relationship via ×” ⟩
    x ⦗ R ⦘ y ∧ x ∈ 𝐔 ∧ y ∈ ~ B
  ≡⟨ “Universal set”, “Identity of ∧” ⟩
    x ⦗ R ⦘ y ∧ y ∈ ~ B
  ≡⟨ “Set complement” ⟩
    x ⦗ R ⦘ y ∧ ¬ (y ∈ B)


Theorem (14.231) “Domain of ◁”: Dom (A ◁ R) = A ∩ Dom R
Proof:
  Using “Set extensionality”:
    For any `x`:
        x ∈ Dom (A ◁ R)
      ≡⟨ “Membership in `Dom`” ⟩
        ∃ y • x ⦗ A ◁ R ⦘ y
      ≡⟨ “Relationship via ◁” ⟩
        ∃ y • x ∈ A ∧ x ⦗ R ⦘ y
      ≡⟨ “Symmetry of ∧” ⟩
        ∃ y • x ⦗ R ⦘ y ∧ x ∈ A
      ≡⟨ “Distributivity of ∧ over ∃” ⟩ 
        (∃ y • x ⦗ R ⦘ y ) ∧ x ∈ A
      ≡⟨ “Membership in `Dom`”, “Intersection” ⟩
        x ∈ A ∩ Dom R

Theorem (14.235) “Domain restriction by `Dom`”:  Dom S ◁ S = S
Proof:
  Using “Relation extensionality”:
    For any `x`, `y`:
        x ⦗ Dom S ◁ S ⦘ y
      ≡⟨ “Relationship via ◁” ⟩
        x ∈ Dom S ∧ x ⦗ S ⦘ y
      ≡⟨ “Membership in `Dom`” ⟩
        (∃ z • x ⦗ S ⦘ z) ∧ x ⦗ S ⦘ y
      ≡⟨ Substitution ⟩
        (∃ z • x ⦗ S ⦘ z) ∧ (x ⦗ S ⦘ z)[z ≔ y]
      ≡⟨ “∃-Introduction” with “Implication via ∧” ⟩
        (x ⦗ S ⦘ z)[z ≔ y]
      ≡⟨ Substitution ⟩
        x ⦗ S ⦘ y

Theorem (14.237) “Domain restriction via ⨾”:
    A ◁ R = id A ⨾ R
Proof:
  Using “Relation extensionality”:
    For any `x`, `y`:
        x ⦗ A ◁ R ⦘ y
      ≡⟨ “Domain restriction” ⟩
        x ∈ A ∧ x ⦗ R ⦘ y ╍╍╍ (z ∈ A ∧ z ⦗ R ⦘ y)[z ≔ x] (sub) --> 
      ≡⟨ Substitution ⟩
        (z ∈ A ∧ z ⦗ R ⦘ y)[z ≔ x]
      ≡⟨ “Trading for ∃”, “One-point rule for ∃” ⟩
        ∃ z • x = z ∧ z ∈ A ∧ z ⦗ R ⦘ y
      ≡⟨ “Relationship via `id`” ⟩
        ∃ z • x ⦗ id A ⦘ z ∧ z ⦗ R ⦘ y
      ≡⟨ “Relation composition” ⟩
        x ⦗ id A ⨾ R ⦘ y

Theorem (14.247) “Nested ◁”:  A ◁ (B ◁ R) = (A ∩ B) ◁ R
Proof:
    A ◁ (B ◁ R)
  =⟨ “Definition of ◁” ⟩
    (B ◁ R) ∩ (A × 𝐔)
  =⟨ “Definition of ◁” ⟩
    R ∩ (B × 𝐔) ∩ (A × 𝐔)
  =⟨ “Distributivity of × over ∩” ⟩
    R ∩ ((A ∩ B) × 𝐔)
  =⟨ “Definition of ◁” ⟩
    (A ∩ B) ◁ R

Theorem (14.248) “Nested ⩤”:  A ⩤ (B ⩤ R) = (A ∪ B) ⩤ R
Proof:
    A ⩤ (B ⩤ R)
  =⟨ “Definition of ⩤” ⟩
    A ⩤ (R ∩ (~ B × 𝐔))
  =⟨ “Definition of ⩤” ⟩
    R ∩ (~ B × 𝐔) ∩ (~ A × 𝐔)
  =⟨ “Distributivity of × over ∩” ⟩
    R ∩ ((~ B ∩ ~ A) × 𝐔)
  =⟨ “De Morgan for ∪” ⟩
    R ∩ (~ (B ∪ A) × 𝐔)
  =⟨ “De Morgan for ∪” ⟩
    R ∩ (~ (B ∪ A) × 𝐔)
  =⟨ “Definition of ⩤” ⟩
    (B ∪ A) ⩤ R

Theorem (14.259) “Antitonicity of ⩥”:  A ⊆ B  ⇒  R ⩥ B  ⊆  R ⩥ A
Proof:
  Assuming `A ⊆ B`:
      R ⩥ B
    =⟨“Definition of ⩥” ⟩
      R ∩ (𝐔 × ~ B)
    ⊆⟨ “Monotonicity of ∩” with “Monotonicity of ×” with “Antitonicity of ~” with Assumption `A ⊆ B`⟩
      R ∩ (𝐔 × ~ A)
    =⟨ “Definition of ⩥”⟩
      R ⩥ A

Theorem (14.303) “Relational image of ⨾”:  (R ⨾ S) ⦇ A ⦈ = S ⦇ R ⦇ A ⦈ ⦈
Proof:
  Using “Set extensionality”:
    For any `z`:
        z ∈ (R ⨾ S) ⦇ A ⦈ 
      ≡⟨ “Relational image” ⟩
        ∃ x ❙ x ∈ A • x ⦗ R ⨾ S ⦘ z
      ≡⟨ “Relation composition” ⟩
        ∃ x ❙ x ∈ A • (∃ y • x ⦗ R ⦘ y ∧ y ⦗ S ⦘ z) 
      ≡⟨ “Nesting for ∃” ⟩
        ∃ x • ∃ y ❙ x ∈ A • x ⦗ R ⦘ y ∧ y ⦗ S ⦘ z
      ≡⟨ “Trading for ∃”, “Interchange of dummies for ∃” ⟩
        ∃ y • ∃ x • x ∈ A ∧ x ⦗ R ⦘ y ∧ y ⦗ S ⦘ z
      ≡⟨ “Trading for ∃”, “Distributivity of ∧ over ∃” ⟩
        ∃ y ❙ (∃ x ❙ x ∈ A • x ⦗ R ⦘ y) • y ⦗ S ⦘ z
      ≡⟨ “Relational image” ⟩
        ∃ y ❙ y ∈ R ⦇ A ⦈ • y ⦗ S ⦘ z
      ≡⟨ “Relational image” ⟩
        z ∈ S ⦇ R ⦇ A ⦈ ⦈

Theorem (14.402) “Relation override”:
    x ⦗ R ⊕ S ⦘ y  ≡  (¬ (x ∈ Dom S) ∧ x ⦗ R ⦘ y) ∨ x ⦗ S ⦘ y
Proof:
    x ⦗ R ⊕ S ⦘ y  
  ≡⟨ “Definition of ⊕” ⟩
    x ⦗ (Dom S ⩤ R) ∪ S ⦘ y  
  ≡⟨ “Relation union” ⟩
    x ⦗ (Dom S ⩤ R) ⦘ y ∨ x ⦗ S ⦘ y  
  ≡⟨ “Relationship via ⩤” ⟩
    (¬ (x ∈ Dom S) ∧ x ⦗ R ⦘ y) ∨ x ⦗ S ⦘ y
